var _elm_community$html_test_runner$Test_Runner_Exploration$formatFailure = F3(
	function (formatFirst, formatLast, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: A3(_elm_community$elm_test$Test_Runner$formatLabels, formatFirst, formatLast, _p1._0),
			_1: _p1._1
		};
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$Internals = F5(
	function (a, b, c, d, e) {
		return {passed: a, failures: b, todos: c, queue: d, incomplete: e};
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$Runner = function (a) {
	return {ctor: 'Runner', _0: a};
};
var _elm_community$html_test_runner$Test_Runner_Exploration$Incomplete = F2(
	function (a, b) {
		return {ctor: 'Incomplete', _0: a, _1: b};
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$Todo = F2(
	function (a, b) {
		return {ctor: 'Todo', _0: a, _1: b};
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$Fail = F2(
	function (a, b) {
		return {ctor: 'Fail', _0: a, _1: b};
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$Pass = function (a) {
	return {ctor: 'Pass', _0: a};
};
var _elm_community$html_test_runner$Test_Runner_Exploration$Running = function (a) {
	return {ctor: 'Running', _0: a};
};
var _elm_community$html_test_runner$Test_Runner_Exploration$toRunning = function (internals) {
	return _elm_community$html_test_runner$Test_Runner_Exploration$Running(
		{
			passed: internals.passed,
			remaining: _elm_lang$core$List$length(internals.queue),
			failures: internals.failures,
			next: _elm_community$html_test_runner$Test_Runner_Exploration$Runner(internals)
		});
};
var _elm_community$html_test_runner$Test_Runner_Exploration$Custom = function (a) {
	return {ctor: 'Custom', _0: a};
};
var _elm_community$html_test_runner$Test_Runner_Exploration$Only = {ctor: 'Only'};
var _elm_community$html_test_runner$Test_Runner_Exploration$Skip = {ctor: 'Skip'};
var _elm_community$html_test_runner$Test_Runner_Exploration$fromTest = F3(
	function (runs, seed, test) {
		var $new = F2(
			function (queue, incomplete) {
				return _elm_community$html_test_runner$Test_Runner_Exploration$Runner(
					{
						passed: 0,
						failures: {ctor: '[]'},
						todos: {ctor: '[]'},
						queue: queue,
						incomplete: incomplete
					});
			});
		var _p2 = A3(_elm_community$elm_test$Test_Runner$fromTest, runs, seed, test);
		switch (_p2.ctor) {
			case 'Plain':
				return A2($new, _p2._0, _elm_lang$core$Maybe$Nothing);
			case 'Only':
				return A2(
					$new,
					_p2._0,
					_elm_lang$core$Maybe$Just(_elm_community$html_test_runner$Test_Runner_Exploration$Only));
			case 'Skipping':
				return A2(
					$new,
					_p2._0,
					_elm_lang$core$Maybe$Just(_elm_community$html_test_runner$Test_Runner_Exploration$Skip));
			default:
				return A2(
					$new,
					{ctor: '[]'},
					_elm_lang$core$Maybe$Just(
						_elm_community$html_test_runner$Test_Runner_Exploration$Custom(_p2._0)));
		}
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$Failure = F2(
	function (a, b) {
		return {ctor: 'Failure', _0: a, _1: b};
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$fromExpectation = F3(
	function (internals, labels, expectations) {
		var partition = function (e) {
			var _p3 = {
				ctor: '_Tuple2',
				_0: _elm_community$elm_test$Test_Runner$isTodo(e),
				_1: _elm_community$elm_test$Test_Runner$getFailure(e)
			};
			if (_p3._1.ctor === 'Just') {
				if (_p3._0 === true) {
					return _elm_lang$core$Tuple$mapFirst(
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(_p3._1._0));
				} else {
					return _elm_lang$core$Tuple$mapSecond(
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(_p3._1._0));
				}
			} else {
				return _elm_lang$core$Basics$identity;
			}
		};
		var _p4 = A3(
			_elm_lang$core$List$foldr,
			partition,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			expectations);
		var todos = _p4._0;
		var failures = _p4._1;
		return (_elm_lang$core$List$isEmpty(failures) && _elm_lang$core$List$isEmpty(todos)) ? _elm_community$html_test_runner$Test_Runner_Exploration$toRunning(
			_elm_lang$core$Native_Utils.update(
				internals,
				{passed: internals.passed + 1})) : (_elm_lang$core$List$isEmpty(failures) ? _elm_community$html_test_runner$Test_Runner_Exploration$toRunning(
			_elm_lang$core$Native_Utils.update(
				internals,
				{
					todos: A2(
						_elm_lang$core$Basics_ops['++'],
						internals.todos,
						{
							ctor: '::',
							_0: A2(_elm_community$html_test_runner$Test_Runner_Exploration$Failure, labels, todos),
							_1: {ctor: '[]'}
						})
				})) : _elm_community$html_test_runner$Test_Runner_Exploration$toRunning(
			_elm_lang$core$Native_Utils.update(
				internals,
				{
					failures: A2(
						_elm_lang$core$Basics_ops['++'],
						internals.failures,
						{
							ctor: '::',
							_0: A2(_elm_community$html_test_runner$Test_Runner_Exploration$Failure, labels, failures),
							_1: {ctor: '[]'}
						})
				})));
	});
var _elm_community$html_test_runner$Test_Runner_Exploration$step = function (_p5) {
	var _p6 = _p5;
	var _p9 = _p6._0;
	var _p7 = {ctor: '_Tuple4', _0: _p9.incomplete, _1: _p9.todos, _2: _p9.failures, _3: _p9.queue};
	_v4_3:
	do {
		if (_p7._3.ctor === '[]') {
			if (_p7._0.ctor === 'Nothing') {
				if (_p7._2.ctor === '[]') {
					if (_p7._1.ctor === '[]') {
						return _elm_community$html_test_runner$Test_Runner_Exploration$Pass(_p9.passed);
					} else {
						return A2(_elm_community$html_test_runner$Test_Runner_Exploration$Todo, _p9.passed, _p7._1);
					}
				} else {
					break _v4_3;
				}
			} else {
				if (_p7._2.ctor === '[]') {
					return A2(_elm_community$html_test_runner$Test_Runner_Exploration$Incomplete, _p9.passed, _p7._0._0);
				} else {
					break _v4_3;
				}
			}
		} else {
			var _p8 = _p7._3._0;
			return A3(
				_elm_community$html_test_runner$Test_Runner_Exploration$fromExpectation,
				_elm_lang$core$Native_Utils.update(
					_p9,
					{queue: _p7._3._1}),
				_p8.labels,
				_p8.run(
					{ctor: '_Tuple0'}));
		}
	} while(false);
	return A2(_elm_community$html_test_runner$Test_Runner_Exploration$Fail, _p9.passed, _p7._2);
};
